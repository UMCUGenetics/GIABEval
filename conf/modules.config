/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {
    withName: CheckQC {
        cpus = { 2 }
        memory = { 1.GB * task.attempt }
        time = { 5.m * task.attempt }
        publishDir = [
            path: { "${params.outdir}/QC/CheckQC" },
            mode: params.publish_dir_mode,
        ]
    }

    withName: BCFTOOLS_ANNOTATE {
        ext.args = "-x \"FILTER\""
        ext.prefix = { "${meta.id}.nofilter" }
        cpus = { 2 }
        memory = { 5.GB * task.attempt }
        time = { (1.ms * vcf_file.size() / 50) * task.attempt }
    }

    withName: BCFTOOLS_REHEADER_PAIRWISE_TP {
        ext.args2 = "--output-type z --write-index=tbi"
        ext.prefix = { "${meta.id}.reheader" }
        cpus = { 2 }
        memory = { 5.GB * task.attempt }
        time = { (1.ms * vcf_file.size() / 50) * task.attempt }
    }

    withName: BCFTOOLS_REHEADER_PAIRWISE {
        ext.args2 = "--output-type z --write-index=tbi"
        ext.prefix = { "${meta.id}.reheader" }
        cpus = { 2 }
        memory = { 5.GB * task.attempt }
        time = { (1.ms * vcf_file.size() / 50) * task.attempt }
        publishDir = [
            [path: "${params.outdir}/HAPPY/pairwise_tp_giab", mode: params.publish_dir_mode, pattern: "*.{vcf,vcf.gz,bcf,bcf.gz}"],
            [path: "${params.outdir}/HAPPY/pairwise_tp_giab", mode: params.publish_dir_mode, pattern: "*.{csi,tbi}"]
        ]
    }

    withName: BCFTOOLS_REHEADER_SINGLE {
        ext.args2 = "--output-type z --write-index=tbi"
        ext.prefix = { "${meta.id}.reheader" }
        cpus = { 2 }
        memory = { 5.GB * task.attempt }
        time = { (1.ms * vcf_file.size() / 50) * task.attempt }
        publishDir = [
            [path: "${params.outdir}/HAPPY/vcf_giab", mode: params.publish_dir_mode, pattern: "*.{vcf,vcf.gz,bcf,bcf.gz}"],
            [path: "${params.outdir}/HAPPY/vcf_giab", mode: params.publish_dir_mode, pattern: "*.{csi,tbi}"]
        ]
    }

    withName: BCFTOOLS_VIEW_PRIMARY {
        ext.args = "--output-type z --write-index=tbi --regions=${params.assembly[params[params.nist_version_to_use].assembly].primary_contigs}"
        ext.prefix = { "${meta.id}_primary" }
        cpus = { 2 }
        memory = { 5.GB * task.attempt }
        time = { (1.ms * vcf_file.size() / 50) * task.attempt }
    }

    withName: BCFTOOLS_VIEW_GIAB {
        ext.args = "--output-type z --write-index=tbi"
        cpus = { 2 }
        memory = { 5.GB * task.attempt }
        time = { (1.ms * vcf_file.size() / 50) * task.attempt }
    }

    withName: BCFTOOLS_VIEW_INPUT {
        ext.args = "--output-type z --write-index=tbi"
        cpus = { 2 }
        memory = { 5.GB * task.attempt }
        time = { (1.ms * vcf_file.size() / 50) * task.attempt }
    }

    withName: BCFTOOLS_NORM {
        ext.args = "-m- -W=tbi"
        ext.prefix = { "${meta.id}.LAnorm" }
        cpus = { 2 }
        memory = { 5.GB * task.attempt }
        time = { (1.ms * vcf_file.size() / 50) * task.attempt }
    }

    withName: EditSummaryFileHappy {
        cpus = { 2 }
        memory = { 1.GB * task.attempt }
        time = { 5.m * task.attempt }
        publishDir = [
            path: { "${params.outdir}/EditSummaryFileHappy" },
            mode: params.publish_dir_mode,
        ]
    }

    withName: ExportParams {
        cpus = { 2 }
        memory = { 1.GB * task.attempt }
        time = { 5.m * task.attempt }
    }

    withName: GATK4_SELECTVARIANTS_NOCALL {
        ext.args = """-select \'(vc.getGenotype(\"QUERY\").isHomVar() || vc.getGenotype(\"QUERY\").isHet()) \
        && (vc.getGenotype(\"TRUTH\").isHomVar() || vc.getGenotype(\"TRUTH\").isHet())\'
        """
        ext.prefix = { "${meta.id}.NC" }
        cpus = { 2 }
        memory = { 5.GB * task.attempt }
        time = { (1.ms * vcf_file.size() / 50) * task.attempt }
    }

    withName: GATK4_SELECTVARIANTS_TP {
        ext.args = ' -select-genotype "BD==\'TP\'" --sample-name TRUTH '
        ext.prefix = { "${meta.id}.TP" }
        cpus = { 2 }
        memory = { 5.GB * task.attempt }
        time = { (1.ms * vcf_file.size() / 50) * task.attempt }
    }

    withName: HAPPY_HAPPY_single {
        container = params.happy_container
        ext.args = """--engine vcfeval \\
        --engine-vcfeval-path rtg \\
        --engine-vcfeval-template ${params.assembly[params[params.nist_version_to_use].assembly].rtg_index} \\
        --usefiltered-truth \\
        --preprocess-truth \\
        """
        cpus = { 2 }
        memory = { 8.GB * task.attempt }
        time = { 15.m * task.attempt }
        publishDir = [
            [path: "${params.outdir}/HAPPY/vcf_giab", mode: params.publish_dir_mode, pattern: '*.summary.csv'],
            [path: "${params.outdir}/HAPPY/vcf_giab", mode: params.publish_dir_mode, pattern: '*.csv.gz'],
            [path: "${params.outdir}/HAPPY/vcf_giab", mode: params.publish_dir_mode, pattern: '*.extended.csv'],
            [path: "${params.outdir}/HAPPY/vcf_giab", mode: params.publish_dir_mode, pattern: '*.json'],
            [path: "${params.outdir}/HAPPY/vcf_giab", mode: params.publish_dir_mode, pattern: '*.metrics.json.gz'],
            [path: "${params.outdir}/HAPPY/vcf_giab", mode: params.publish_dir_mode, pattern: 'versions.yml']
        ]
    }

    withName: HAPPY_HAPPY_pairwise {
        container = params.happy_container
        ext.args = """--engine vcfeval \\
        --engine-vcfeval-path rtg \\
        --engine-vcfeval-template ${params.assembly[params[params.nist_version_to_use].assembly].rtg_index} \\
        --usefiltered-truth \\
        --preprocess-truth \\
        """
        cpus = { 2 }
        memory = { 8.GB * task.attempt }
        time = { 15.m * task.attempt }
    }

    withName: HAPPY_HAPPY_tp_giab {
        container = params.happy_container
        ext.args = """--engine vcfeval \\
        --engine-vcfeval-path rtg \\
        --engine-vcfeval-template ${params.assembly[params[params.nist_version_to_use].assembly].rtg_index} \\
        --usefiltered-truth \\
        --preprocess-truth \\
        """
        cpus = { 2 }
        memory = { 8.GB * task.attempt }
        time = { 15.m * task.attempt }
        publishDir = [
            [path: "${params.outdir}/HAPPY/pairwise_tp_giab", mode: params.publish_dir_mode, pattern: '*.summary.csv'],
            [path: "${params.outdir}/HAPPY/pairwise_tp_giab", mode: params.publish_dir_mode, pattern: '*.csv.gz'],
            [path: "${params.outdir}/HAPPY/pairwise_tp_giab", mode: params.publish_dir_mode, pattern: '*.extended.csv'],
            [path: "${params.outdir}/HAPPY/pairwise_tp_giab", mode: params.publish_dir_mode, pattern: '*.json'],
            [path: "${params.outdir}/HAPPY/pairwise_tp_giab", mode: params.publish_dir_mode, pattern: '*.metrics.json.gz'],
            [path: "${params.outdir}/HAPPY/pairwise_tp_giab", mode: params.publish_dir_mode, pattern: 'versions.yml']
        ]
    }

    withName: MULTIQC {
        publishDir = [
            path: { "${params.outdir}/QC" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: VersionLog {
        cpus = { 2 }
        memory = { 1.GB * task.attempt }
        time = { 5.m * task.attempt }
        publishDir = [
            path: { "${params.outdir}/log/" },
            mode: params.publish_dir_mode,
        ]
    }

    withName: Workflow_ExportParams {
        cpus = { 2 }
        memory = { 1.GB * task.attempt }
        time = { 5.m * task.attempt }
        publishDir = [
            path: { "${params.outdir}/log/" },
            mode: params.publish_dir_mode,
        ]
    }
}
